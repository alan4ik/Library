#include <WinSock2.h>
#include <iostream>
#include <string>
#include <vector>

#include <openssl/evp.h>
#include <openssl/aes.h>

#pragma comment(lib, "Ws2_32.lib")
#pragma comment (lib, "libcrypto.lib")
#pragma comment (lib, "libssl.lib")
#pragma warning(disable: 4996)

SOCKET create_socket(int port);
std::string encryptAES(const std::string& plaintext, const std::string& key, const std::string& iv);
std::string decryptAES(const std::string& ciphertext, const int& ciphertext_len, const std::string& key, const std::string& iv);

int main()
{
    SOCKET mysocket = 0;
    char buffer[1024];
    mysocket = create_socket(4433);
    struct sockaddr_in addr;
    int len = sizeof(addr);

    // Симметричный ключ и вектор инициализации
    std::string key = "0123456789ABCDEF0123456789ABCDEF";
    std::string iv = "0123456789ABCDEF";

    std::string plaintext = "test";
    std::string ciphertext = encryptAES(plaintext, key, iv);

    for (int i = 0; i < 100; i++) {
        send(mysocket, ciphertext.c_str(), ciphertext.length(), 0);

        int ret = recv(mysocket, buffer, sizeof(buffer), 0);
        buffer[ret] = '\0';

        std::string decryptedMessage = decryptAES(buffer, ret, key, iv);
        if (decryptedMessage.empty())
            std::cout << "Error\n";
        std::cout << i << ": " << decryptedMessage << std::endl;
    }
    return 0;
}

SOCKET create_socket(int port)
{
    WSADATA wsaData;
    SOCKET clientSocket;
    struct sockaddr_in serverAddress;
    char buffer[1024];

    // Инициализация WinSock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "Ошибка при инициализации WinSock" << std::endl;
        return 1;
    }

    // Создание сокета
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET) {
        std::cerr << "Ошибка при создании сокета" << std::endl;
        WSACleanup();
        return 1;
    }

    // Настройка адреса сервера
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_port = htons(12345);
    serverAddress.sin_addr.s_addr = inet_addr("127.0.0.1");

    // Подключение к серверу
    if (connect(clientSocket, (struct sockaddr*)&serverAddress, sizeof(serverAddress)) == SOCKET_ERROR) {
        std::cerr << "Ошибка при подключении к серверу" << std::endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    return clientSocket;
}

// Функция для шифрования данных с помощью алгоритма AES
std::string encryptAES(const std::string& plaintext, const std::string& key, const std::string& iv) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, reinterpret_cast<const unsigned char*>(key.c_str()), reinterpret_cast<const unsigned char*>(iv.c_str()));

    int ciphertext_len = plaintext.length() + AES_BLOCK_SIZE;
    std::string ciphertext(ciphertext_len, 0);

    EVP_EncryptUpdate(ctx, reinterpret_cast<unsigned char*>(&ciphertext[0]), &ciphertext_len, reinterpret_cast<const unsigned char*>(plaintext.c_str()), plaintext.length());

    int final_len = 0;
    EVP_EncryptFinal_ex(ctx, reinterpret_cast<unsigned char*>(&ciphertext[ciphertext_len]), &final_len);
    ciphertext_len += final_len;

    EVP_CIPHER_CTX_free(ctx);

    ciphertext.resize(ciphertext_len);
    return ciphertext;
}

std::string decryptAES(const std::string& ciphertext, const int& ciphertext_len, const std::string& key, const std::string& iv) {
    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, reinterpret_cast<const unsigned char*>(key.c_str()), reinterpret_cast<const unsigned char*>(iv.c_str()));

    int plaintext_len = ciphertext_len;
    std::string plaintext(plaintext_len, 0);

    EVP_DecryptUpdate(ctx, reinterpret_cast<unsigned char*>(&plaintext[0]), &plaintext_len, reinterpret_cast<const unsigned char*>(ciphertext.c_str()), ciphertext.length());

    int final_len = 0;
    EVP_DecryptFinal_ex(ctx, reinterpret_cast<unsigned char*>(&plaintext[plaintext_len]), &final_len);
    plaintext_len += final_len;

    EVP_CIPHER_CTX_free(ctx);

    plaintext.resize(plaintext_len);
    return plaintext;
}