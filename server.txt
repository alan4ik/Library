//#include <iostream>
//#include <cstring>
//#include <winsock2.h>
//#include <openssl/rsa.h>
//#include <openssl/pem.h>
//#include <openssl/evp.h>
//#include <openssl/bn.h>
//
//const int PORT = 12345;
//const int BUFFER_SIZE = 1024;
//
//const char* KEY = "0123456789abcdef0"; // 128-bit ключ
//const char* IV = "abcdefghijklmnop"; // 128-bit вектор инициализации
//
//#pragma comment(lib, "ws2_32.lib")
//#pragma comment(lib, "libcrypto.lib")
//#pragma comment(lib, "libssl.lib")
//
//RSA* generateRsaKey(int keySize) {
//
//    RSA* rsa = RSA_new();
//    BIGNUM* bne = BN_new();
//    if (BN_set_word(bne, RSA_F4) != 1) {
//        throw std::runtime_error("Error setting BIGNUM");
//    }
//
//    if (RSA_generate_key_ex(rsa, keySize, bne, NULL) != 1) {
//        throw std::runtime_error("Error generating private key");
//    }
//
//    BN_free(bne);
//
//    return rsa;
//}
//
//std::string savePrivateKeyInMemory(RSA* rsa) {
//    BIO* privateKeyBio = BIO_new(BIO_s_mem());
//    if (!PEM_write_bio_RSAPrivateKey(privateKeyBio, rsa, NULL, NULL, 0, NULL, NULL)) {
//        RSA_free(rsa);
//        BIO_free(privateKeyBio);
//        throw std::runtime_error("Error writing private key to memory");
//    }
//
//    char* privateKeyData;
//    long privateKeyLength = BIO_get_mem_data(privateKeyBio, &privateKeyData);
//
//    std::string privateKey(privateKeyData, privateKeyLength);
//
//    BIO_free(privateKeyBio);
//
//    return privateKey;
//}
//
//std::string savePublicKeyInMemory(RSA* rsa) {
//    EVP_PKEY* evpKey = EVP_PKEY_new();
//    EVP_PKEY_set1_RSA(evpKey, rsa);
//    RSA_free(rsa); // Release RSA structure
//
//    BIO* publicKeyBio = BIO_new(BIO_s_mem());
//    if (!PEM_write_bio_PUBKEY(publicKeyBio, evpKey)) {
//        EVP_PKEY_free(evpKey);
//        BIO_free(publicKeyBio);
//        throw std::runtime_error("Error writing public key to memory");
//    }
//
//    char* publicKeyData;
//    long publicKeyLength = BIO_get_mem_data(publicKeyBio, &publicKeyData);
//
//    std::string publicKey(publicKeyData, publicKeyLength);
//
//    BIO_free(publicKeyBio);
//    EVP_PKEY_free(evpKey);
//
//    return publicKey;
//}
//
//void handleClient(int clientSocket) {
//    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
//    EVP_CipherInit_ex(ctx, EVP_aes_128_cbc(), NULL, (const unsigned char*)KEY, (const unsigned char*)IV, 1);
//
//    unsigned char inbuf[256];
//    unsigned char outbuf[256];
//    int outlen;
//
//    while (true) {
//        memset(inbuf, 0, sizeof(inbuf));
//        int bytesReceived = recv(clientSocket, (char*)inbuf, sizeof(inbuf), 0);
//        if (bytesReceived <= 0) {
//            break;
//        }
//
//        EVP_CipherUpdate(ctx, outbuf, &outlen, inbuf, bytesReceived);
//        send(clientSocket, (const char*)outbuf, outlen, 0);
//    }
//
//    EVP_CipherFinal(ctx, outbuf, &outlen);
//    send(clientSocket, (const char*)outbuf, outlen, 0);
//    EVP_CIPHER_CTX_free(ctx);
//
//    closesocket(clientSocket);
//}
//
////int main() {
////    try {
////        RSA* rsa = generateRsaKey(2048);
////
////        std::string privateKey = savePrivateKeyInMemory(rsa);
////        std::string publicKey = savePublicKeyInMemory(rsa);
////
////        RSA_free(rsa);
////
////        std::cout << "Private and public keys generated and saved in memory." << std::endl;
////    }
////    catch (const std::exception& ex) {
////        std::cerr << "Error: " << ex.what() << std::endl;
////        return 1;
////    }
////}
//
//int main() {
//
//    WSADATA wsaData;
//    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
//        std::cerr << "WSAStartup failed" << std::endl;
//        return 1;
//    }
//
//    SOCKET serverSocket = socket(AF_INET, SOCK_STREAM, 0);
//    if (serverSocket == INVALID_SOCKET) {
//        std::cerr << "Error creating server socket" << std::endl;
//        WSACleanup();
//        return 1;
//    }
//
//    sockaddr_in serverAddr;
//    serverAddr.sin_family = AF_INET;
//    serverAddr.sin_port = htons(PORT);
//    serverAddr.sin_addr.s_addr = INADDR_ANY;
//
//    if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
//        std::cerr << "Error binding server socket" << std::endl;
//        closesocket(serverSocket);
//        WSACleanup();
//        return 1;
//    }
//
//    if (listen(serverSocket, 5) == SOCKET_ERROR) {
//        std::cerr << "Error listening on server socket" << std::endl;
//        closesocket(serverSocket);
//        WSACleanup();
//        return 1;
//    }
//
//    std::cout << "Server is listening on port " << PORT << std::endl;
//
//    SOCKET clientSocket;
//    sockaddr_in clientAddr;
//    int clientAddrLen = sizeof(clientAddr);
//    clientSocket = accept(serverSocket, (sockaddr*)&clientAddr, &clientAddrLen);
//    if (clientSocket == INVALID_SOCKET) {
//        std::cerr << "Error accepting client connection" << std::endl;
//        closesocket(serverSocket);
//        WSACleanup();
//        return 1;
//    }
//
//    char buffer[BUFFER_SIZE];
//    int bytesRead;
//    while (true) {
//        bytesRead = recv(clientSocket, buffer, BUFFER_SIZE, 0);
//        if (bytesRead <= 0) {
//            break;
//        }
//        buffer[bytesRead] = '\0'; // Null-terminate the received data
//        std::cout << "Received: " << buffer << std::endl;
//        send(clientSocket, buffer, bytesRead, 0); // Echo the data back to the client
//    }
//
//    closesocket(clientSocket);
//    closesocket(serverSocket);
//    WSACleanup();
//
//    return 0;
//}

#include <iostream>
#include <openssl/evp.h>
#include <winsock2.h>

#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "libcrypto.lib")
#pragma comment(lib, "libssl.lib")

const int SERVER_PORT = 12345;

// Hard-coded key and IV for AES encryption
const char* AES_KEY = "MySecretKey12345";
const char* AES_IV = "InitializationVe";

void handleClient(SOCKET clientSocket, EVP_CIPHER_CTX* ctx) {
    unsigned char ciphertext[256];
    int ciphertext_len = recv(clientSocket, (char*)ciphertext, sizeof(ciphertext), 0);

    unsigned char plaintext[256];
    int len;
    int plaintext_len;

    EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, (const unsigned char*)AES_KEY, (const unsigned char*)AES_IV);
    EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len);
    plaintext_len = len;
    EVP_DecryptFinal_ex(ctx, plaintext + len, &len);
    plaintext_len += len;

    std::cout << "Received from Client: " << plaintext << std::endl;

    const char* serverResponse = "Hello, Client, from Server!";
    int serverResponse_len = strlen(serverResponse);

    unsigned char serverResponse_ciphertext[256];
    int serverResponse_ciphertext_len = 0;

    EVP_EncryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, (const unsigned char*)AES_KEY, (const unsigned char*)AES_IV);
    EVP_EncryptUpdate(ctx, serverResponse_ciphertext, &serverResponse_ciphertext_len, (const unsigned char*)serverResponse, serverResponse_len);

    send(clientSocket, (char*)serverResponse_ciphertext, serverResponse_ciphertext_len, 0);
    closesocket(clientSocket);
}

int main() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "WSAStartup failed" << std::endl;
        return 1;
    }

    SOCKET serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        std::cerr << "Socket creation failed" << std::endl;
        WSACleanup();
        return 1;
    }

    sockaddr_in serverAddr;
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(SERVER_PORT);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        std::cerr << "Bind failed" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    if (listen(serverSocket, 5) == SOCKET_ERROR) {
        std::cerr << "Listen failed" << std::endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    EVP_CIPHER_CTX* ctx;
    ctx = EVP_CIPHER_CTX_new();

    while (true) {
        sockaddr_in clientAddr;
        int addrSize = sizeof(clientAddr);
        SOCKET clientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &addrSize);

        if (clientSocket == INVALID_SOCKET) {
            std::cerr << "Accept failed" << std::endl;
            closesocket(serverSocket);
            WSACleanup();
            EVP_CIPHER_CTX_free(ctx);
            return 1;
        }

        handleClient(clientSocket, ctx);
    }

    EVP_CIPHER_CTX_free(ctx);
    closesocket(serverSocket);
    WSACleanup();

    return 0;
}